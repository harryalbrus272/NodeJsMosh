Two approaches in modelling relationships in MongoDB are
1. Using Reference (Normalization) consistency friendly
    let author = {
        name: "Mosh"
    }
    //No relationship between ids passed in the document
    let course = {
        author: 'id',
    }
2. Using Embedded Documents (Denormalization) performance friendly
let course = {
    author: {
        name: 'Mosh'
    }
}
Trade off between query performance vs consistency

//Hybrid
let author = {
    name: 'Mosh'
    //Other properties
}
let course = {
    author: {
        id: 'ref',
        name: 'Mosh'
    }
}

// TODO: Learn about 2 phase commit transactions

Object Id - The way to understand what each object id means
61bf104b6c49093b53523ed5
12 bytes
    1. 4 bytes: timestamp
    2. 3 bytes: machine identifier
    3. 2 bytes: process identifier
    4. 3 bytes: counter

//1 byte = 8 bits
// 256 characters
2 ^ 24 = 16M

const mongoose = require('mongoose');
const id = mongoose.Types.ObjectId();
console.log(id); // id of the document
console.log(id.getTimestamp()); //returns the time of creation of the document
Checking the validity of the document Id mongoose.Types.ObjectId().isValid();

//Driver -> MongoDB Can generate a almost unique identifier for the object. No need to talk to a central place.
joi-password-complexity to check the package to check the complexity of the passwords entered.

JWT has 3 parts :- Header - {algorithm, typeOfToken: 'jwt'}
                   Payload- {sub: userID, name, admin:true/false} //Public properties in this section
                   Verify Signature - {} Digital Signature based on the content of the payload with a secret key.
                   Without this key, we will be able to decode the data.

Winston logger comes with transports - storage device for our logs
Console, File, HTTP transports 
There are plugins to log to the MongoDB, CouchDB, Redis, Loggly

What is Automated Testing - Practice of writing code to test our code, and then run those tests in an automated fashion.
Code comprises of - 1. Production code 2. Test code
Automated test are repeatable
Benefits of automated testing 
1. Test yout code frequently, in less time
2. Catch bugs before deploying
3. Deploy with more confidence
4. Refactor with more confidence
5. Focus more on the quality
Disclaimer - You can just reduce the bugs, not produce a bug-free software.
Refactoring means changing the structure of the code without changing its behaviour.
Types of tests -
1. Unit tests - Test a unit of an applications without its external dependencies. Cheap to write and they execute fast. Can't get a lot of confidence.
2. Integration tests - Test a few unit of an applications with its external dependencies. Files, databases, etc. Take longer to execute. Give more confidence.
3. End-to-end tests - Drives an applications through its UI. Most amount of confidence. Very slow. Very brittle. Selenium is one of the products.

Test Pyramid- Most tests in the unit test. Bunch of integration test. Few end-to-end test to key function of the applications. NO EDGE CASES with E2.
Test Pyramid gives you 3 recommendation -
1. Favour unit test over other tests.
2. Cover unit test gaps with integration tests.
3. Use E2E tests sparingly.

Frameworks - Mocha[Chai, Sinon], Jasmine, Jest testing libraries. Focus the fundamentals not the tooling

TDD - Test Driven Development
With TDD, you write your tests before writing the production code.
Steps -
    1. Write the failing tests
    2. Write the simplest code to make the test pass.
    3. Refractor your code if necessary
Repeat the steps until you complete the feature

Benefits of TDD - 
    1. Testable source code
    2. Full coverage by tests.
    3. Simpler Implementation.

Test first vs code first - In theory TDD is best but the use case may differ in the better one.