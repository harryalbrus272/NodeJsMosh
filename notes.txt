Two approaches in modelling relationships in MongoDB are
1. Using Reference (Normalization) consistency friendly
    let author = {
        name: "Mosh"
    }
    //No relationship between ids passed in the document
    let course = {
        author: 'id',
    }
2. Using Embedded Documents (Denormalization) performance friendly
let course = {
    author: {
        name: 'Mosh'
    }
}
Trade off between query performance vs consistency

//Hybrid
let author = {
    name: 'Mosh'
    //Other properties
}
let course = {
    author: {
        id: 'ref',
        name: 'Mosh'
    }
}

// TODO: Learn about 2 phase commit transactions

Object Id - The way to understand what each object id means
61bf104b6c49093b53523ed5
12 bytes
    1. 4 bytes: timestamp
    2. 3 bytes: machine identifier
    3. 2 bytes: process identifier
    4. 3 bytes: counter

//1 byte = 8 bits
// 256 characters
2 ^ 24 = 16M

const mongoose = require('mongoose');
const id = mongoose.Types.ObjectId();
console.log(id); // id of the document
console.log(id.getTimestamp()); //returns the time of creation of the document
Checking the validity of the document Id mongoose.Types.ObjectId().isValid();

//Driver -> MongoDB Can generate a almost unique identifier for the object. No need to talk to a central place.